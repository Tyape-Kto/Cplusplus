1). a+b+c acts as (a+b)+c
     as it operates from left to right
    when you divide some integer from integer, you get integer - 17/5 = 3 not 3.something 
    

2). to declare variable,
    -int num1{0};
      where, 
       int = datatype
       num1 = instance of class int
       {0} = which sets default value of num1
3).
    [
     #include<iostream>
     #include<string>
     #include<iomanip> // parameterized string manipulator
     using std::setprecision;
     using namespace std;
     using std::fixed;
     int main(){
              int num1, num2;
              string s;
              cin >> num1 >> num2; // 2 numbers with space in between are saved in this num1 and num2 instances 
              cout << setprecision(2) << fixed; // after this all the double have only 2 after decimal place,
              /*
              without fixed flag: 1.23e+09
              with fixed flag: 1230000000.00000
              */
          }
     
    ]

4). endl flushes all the output at once and it is not so important in small application but at large application cout may wait for other information 
          and it may not print at the exact step you want. so it has 2 functionality
          
5). when you have large double or long or float then it may show in e format which may cause problem at solving problem so i used setprecision(3) remember,
     -printf("%0.9lf",d);


6).  Note: when on linux - g++ main.cpp -o main.exe
                         - ./main.exe
     this way you can work on terminal

7). [
      cout << s3 << " " << s3.length();
      cout << "\nThe results of comparing s1 and s2:" << boolalpha <<  "\ns1 == s2: " << (s1 == s2) << "\ns1 != s2: " << (s1 != s2)<< endl;
      // here (boolalpha) makes 0 and 1 to true and false of upcoming condition(not values like 0) at any line after it, which is string manipulator from iostream.
      // and to stop it there is (noboolalpha)
      
     ]
     
8).  -string s1;
     s1.length();
     s1.empty();
     s1.starts_with("wha"); // these works on c++ version 20 not before those
     s2.ends_with("dh");

9).
     if (condition) {
          ...
     }
     else if {
          ...     
     }
     else { 
          ...
     }
     // you should not put ";" after condition or code inside bracket will execute anyway. cause no action after condition ending by ';'.


10). 
     -cout << (score <=60 ? "Failed" : "Passed");
     // you can use ?: instead of if/else statement.
     // this is called as conditional operator.

11). Sentinel-COntrolled Iteration ( when you don't know how many iteration you need to do )
         just stop while loop at perticular input than number of iteration.

12). [
     static_cast<datatype>(variable); // this static_cast creates the copy of variable and changes it into any datatype you want.
     ]
     
